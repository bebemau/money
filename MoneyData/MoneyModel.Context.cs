//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MoneyData
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class MoneyEntities : DbContext
    {
        public MoneyEntities()
            : base("name=MoneyEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<tblBill> tblBills { get; set; }
        public virtual DbSet<tblBuyer> tblBuyers { get; set; }
        public virtual DbSet<tblCategory> tblCategories { get; set; }
        public virtual DbSet<tblEbay> tblEbays { get; set; }
        public virtual DbSet<tblPayment> tblPayments { get; set; }
        public virtual DbSet<tblPaymentDetail> tblPaymentDetails { get; set; }
        public virtual DbSet<tblPaymentType> tblPaymentTypes { get; set; }
        public virtual DbSet<tblTransaction> tblTransactions { get; set; }
        public virtual DbSet<tblVendor> tblVendors { get; set; }
    
        public virtual ObjectResult<Nullable<double>> DisplayBalance()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<double>>("DisplayBalance");
        }
    
        public virtual ObjectResult<DisplayBills_Result> DisplayBills(Nullable<int> vendorID)
        {
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DisplayBills_Result>("DisplayBills", vendorIDParameter);
        }
    
        public virtual ObjectResult<DisplayPaymentDetails_Result> DisplayPaymentDetails(Nullable<int> paymentID)
        {
            var paymentIDParameter = paymentID.HasValue ?
                new ObjectParameter("PaymentID", paymentID) :
                new ObjectParameter("PaymentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DisplayPaymentDetails_Result>("DisplayPaymentDetails", paymentIDParameter);
        }
    
        public virtual ObjectResult<DisplayTransactions_Result> DisplayTransactions(Nullable<int> transactionID, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, Nullable<int> bankID, Nullable<int> vendorID, Nullable<double> amountFrom, Nullable<double> amountTo, string description, Nullable<int> categoryID)
        {
            var transactionIDParameter = transactionID.HasValue ?
                new ObjectParameter("TransactionID", transactionID) :
                new ObjectParameter("TransactionID", typeof(int));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var bankIDParameter = bankID.HasValue ?
                new ObjectParameter("BankID", bankID) :
                new ObjectParameter("BankID", typeof(int));
    
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(int));
    
            var amountFromParameter = amountFrom.HasValue ?
                new ObjectParameter("AmountFrom", amountFrom) :
                new ObjectParameter("AmountFrom", typeof(double));
    
            var amountToParameter = amountTo.HasValue ?
                new ObjectParameter("AmountTo", amountTo) :
                new ObjectParameter("AmountTo", typeof(double));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DisplayTransactions_Result>("DisplayTransactions", transactionIDParameter, dateFromParameter, dateToParameter, bankIDParameter, vendorIDParameter, amountFromParameter, amountToParameter, descriptionParameter, categoryIDParameter);
        }
    
        public virtual ObjectResult<DisplayPayments_Result> DisplayPayments(Nullable<int> paymentID, Nullable<int> bankID, Nullable<int> vendorID, Nullable<double> paymentAmount, Nullable<System.DateTime> paymentDateFrom, Nullable<System.DateTime> paymentDateTo)
        {
            var paymentIDParameter = paymentID.HasValue ?
                new ObjectParameter("PaymentID", paymentID) :
                new ObjectParameter("PaymentID", typeof(int));
    
            var bankIDParameter = bankID.HasValue ?
                new ObjectParameter("BankID", bankID) :
                new ObjectParameter("BankID", typeof(int));
    
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(int));
    
            var paymentAmountParameter = paymentAmount.HasValue ?
                new ObjectParameter("PaymentAmount", paymentAmount) :
                new ObjectParameter("PaymentAmount", typeof(double));
    
            var paymentDateFromParameter = paymentDateFrom.HasValue ?
                new ObjectParameter("PaymentDateFrom", paymentDateFrom) :
                new ObjectParameter("PaymentDateFrom", typeof(System.DateTime));
    
            var paymentDateToParameter = paymentDateTo.HasValue ?
                new ObjectParameter("PaymentDateTo", paymentDateTo) :
                new ObjectParameter("PaymentDateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DisplayPayments_Result>("DisplayPayments", paymentIDParameter, bankIDParameter, vendorIDParameter, paymentAmountParameter, paymentDateFromParameter, paymentDateToParameter);
        }
    }
}
